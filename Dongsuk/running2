import random
import json
from pico2d import*

def handle_event():
    global running
    global boy

    events = get_events()
    for event in events:
        if event.type == SDL_QUIT:
            running = False
        elif event.type == SDL_KEYDOWN and event.key == SDLK_ESCAPE:
            running = False

def create_team():

    team_data_text = {
        "Tiffany":{"StartState":"LEFT_STAND", "x":100, "y":100},
        "Yuna":{"StartState":"RIGHT_RUN" ,"x":200 ,"y" :200},
        "Sunny"	:{"StartState":"LEFT_RUN" ,"x":300 ,"y":300},
        "Yuri":{"StartState":"RIGHT_STAND" ,"x":400 ,"y":400},
        "Jessica":{"StartState":"LEFT_STAND" ,"x":500 ,"y":500},
    }

    player_state_table = {
        "LEFT_RUN" : boy.handle_left_run,
        "RIGHT_RUN" : boy.handle_right_run,
        "LEFT_STAND" : boy.handle_left_stand,
        "RIGHT_STAND" : boy.handle_right_stand
    }

    team_data_file = open('team_data.txt', 'r')
    team_data = json.load(team_data_file)
    team_data_file.close()

    team = []

    for name in team_data:
        player = Boy()
        player.name = name
        player.x = team_data[name]['x']
        player.y = team_data[name]['y']
        player.state = player_state_table[team_data[name]['StartState']]
        team.append(player)

    return team

class Grass:
    def __init__(self):
        self.image = load_image('grass.png')
    def draw(self):
        self.image.draw(400, 30)

class Boy:
    image = None

    LEFT_RUN, RIGHT_RUN, LEFT_STAND, RIGHT_STAND = 0, 1, 2, 3

    def __init__(self):
        self.x = random.randint(100, 700),90
        self.y = random.randint(100, 600),90
        self.frame = random.randint(0, 7)
        self.run_frame = 0
        self.run_frame = 0
        self.name = 'noname'
        self.state = self.RIGHT_RUN
        if Boy.image == None:
            self.image = load_image('run_animation.png')

    def handle_event(self, event):

        for event in events:
            if (event.type, event.key) == (SDL_KEYDOWN, SDLK_LEFT):
                if self.state in (self.RIGHT_STAND, self.LEFT_STAND):
                    self.state = self.LEFT_RUN
            elif (event.type, event.key) == (SDL_KEYDOWN, SDLK_RIGHT):
                if self.state in (self.RIGHT_STAND, self.LEFT_STAND):
                    self.state = self.RIGHT_RUN
            elif (event.type, event.key) == (SDL_KEYUP, SDLK_RIGHT):
                if self.state in (self.RIGHT_STAND, self.LEFT_STAND):
                    self.state = self.RIGHT_STAND
            elif (event.type, event.key) == (SDL_KEYUP, SDLK_LEFT):
                if self.state in (self.RIGHT_STAND, self.LEFT_STAND):
                    self.state = self.LEFT_STAND

    def update(self):
        self.frame = (self.frame + 1) % 8
        if self.state == self.RIGHT_RUN:
            self.x = min(800, self.x + 5)
        elif self.state == self.LEFT_RUN:
            self.x = max(0, self.x - 5)

    def handle_left_run(self):
        self.x -= 3
        self.run_frame +=1
        if self.x < 0:
            self.state = self.RIGHT_RUN
            self.x = 0
        elif self.run_frame == 100:
            self.state = self.LEFT_STAND
            self.stand_frame = 0

    def handle_left_stand(self):
        self.stand_frame += 1
        if self.stand_frame == 50:
            self.state = self.LEFT_RUN
            self.run_frame = 0

    def handle_right_run(self):
        self.x += 3
        self.run_frame +=1
        if self.x > 800:
            self.state = self.LEFT_RUN
            self.x = 800
        if self.run_frame == 100:
            self.state = self.RIGHT_STAND
            self.stand_frame = 0

    def handle_right_stand(self):
        self.stand_frame += 1
        if self.stand_frame == 50:
            self.state = self.RIGHT_RUN
            self.run_frame = 0

    handle_state = {
        LEFT_RUN : handle_left_run,
        RIGHT_RUN : handle_right_run,
        LEFT_STAND : handle_left_stand,
        RIGHT_STAND : handle_right_stand
    }
    def draw(self):
        self.image.clip_draw(self.frame*100, self.state*100, 100, 100, self.x, self.y)

def main():
    open_canvas()
    boy = Boy()
    grass = Grass()
    running = True

    while running:
        handle_event()

        boy.update()
        clear_canvas()
        grass.draw()
        boy.draw()
        update_canvas()

        delay(0.05)
    close_canvas()


if __name__== '__main__':
    main()