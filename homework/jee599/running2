import json
import random
import back

from pico2d import*

def handle_events(frame_time):

    global running
    events = get_events()
    for event in events:
        if event.type == SDL_QUIT:
            running = False
        elif event.type == SDL_KEYDOWN and event.key == SDLK_ESCAPE:
            running = False

def create_team():

    player_state_table = {
        "LEFT_RUN" : Boy.LEFT_RUN,
        "RIGHT_RUN" : Boy.RIGHT_RUN,
        "LEFT_STAND" : Boy.LEFT_STAND,
        "RIGHT_STAND" : Boy.RIGHT_STAND
    }

    team_data_file = open('team_data.txt', 'r')
    team_data = json.load(team_data_file)
    team_data_file.close()

    team = []

    for name in team_data:
        player = Boy()
        player.name = name
        player.x = team_data[name]['x']
        player.y = team_data[name]['y']
        player.state = player_state_table[team_data[name]['StartState']]
        team.append(player)

    return team

class Grass:
    def __init__(self):
        self.image = load_image('grass.png')

    def draw(self):
        self.image.draw(400, 30)

class Boy:

    PIXEL_PER_METER = (10.0 / 0.3)
    RUN_SPEED_KMPH = 20.0
    RUN_SPEED_MPM = (RUN_SPEED_KMPH * 1000.0 / 60.0)
    RUN_SPEED_MPS = (RUN_SPEED_MPM / 60.0)
    RUN_SPEED_PPS = (RUN_SPEED_MPS * PIXEL_PER_METER)

    TIME_PER_ACTION = 0.5
    ACTION_PER_TIME = 1.0 / TIME_PER_ACTION
    FRAMES_PER_ACTION = 8
    image = None

    LEFT_RUN, RIGHT_RUN, LEFT_STAND, RIGHT_STAND = 0, 1, 2, 3

    def __init__(self):
        self.x, self.y = random.randint(100, 700),90
        self.frame = random.randint(0, 7)
        self.run_frame = 0
        self.name = 'noname'
        self.stand_frame = 0
        self.total_frames = 0
        self.state = self.RIGHT_RUN
        self.dir = 1

        if Boy.image == None:
            self.image = load_image('animation_sheet.png')

    def update(self, frame_time):
        distance = Boy.RUN_SPEED_PPS * frame_time
        self.total_frames += Boy.FRAMES_PER_ACTION * Boy.ACTION_PER_TIME * frame_time
        self.frame = int(self.total_frames) % 8
        self.x += (self.dir * distance)

        if self.x > 960:
            self.dir = -1
            self.x = 960
            self.state = self.LEFT_RUN
            print("Change Time : %f, Total Frame : %d "%(get_time(), self.total_frames))
        elif self.x < 0:
            self.dir = 1
            self.x = 0
            self.state = self.RIGHT_RUN
            print("Change Time : %f, Total Frame : %d " % (get_time(), self.total_frames))
    def handle_event(self, event):

        for event in events:
            if (event.type, event.key) == (SDL_KEYDOWN, SDLK_LEFT):
                if self.state in (self.RIGHT_STAND, self.LEFT_STAND):
                    self.state = self.LEFT_RUN
            elif (event.type, event.key) == (SDL_KEYDOWN, SDLK_RIGHT):
                if self.state in (self.RIGHT_STAND, self.LEFT_STAND):
                    self.state = self.RIGHT_RUN
            elif (event.type, event.key) == (SDL_KEYUP, SDLK_RIGHT):
                if self.state in (self.RIGHT_STAND, self.LEFT_STAND):
                    self.state = self.RIGHT_STAND
            elif (event.type, event.key) == (SDL_KEYUP, SDLK_LEFT):
                if self.state in (self.RIGHT_STAND, self.LEFT_STAND):
                    self.state = self.LEFT_STAND

    def handle_left_run(self):
        self.x -= 3
        self.run_frame += 1
        if self.x < 0:
            self.state = self.RIGHT_RUN
            self.x = 0
        elif self.run_frame == 100:
            self.state = self.LEFT_STAND
            self.stand_frame = 0

    def handle_left_stand(self):
        self.stand_frame += 1
        if self.stand_frame == 50:
            self.state = self.LEFT_RUN
            self.run_frame = 0
    def handle_right_run(self):
        self.x += 3
        self.run_frame +=1
        if self.x > 800:
            self.state = self.LEFT_RUN
            self.x = 800
        if self.run_frame == 100:
            self.state = self.RIGHT_STAND
            self.stand_frame = 0
    def handle_right_stand(self):
        self.stand_frame += 1
        if self.stand_frame == 50:
            self.state = self.RIGHT_RUN
            self.run_frame = 0
    handle_state = {
        LEFT_RUN : handle_left_run,
        RIGHT_RUN : handle_right_run,
        LEFT_STAND : handle_left_stand,
        RIGHT_STAND : handle_right_stand
    }
    def draw(self):
        self.image.clip_draw(self.frame*100, self.state*100, 100, 100, self.x, self.y)

#def get_frame_time():
#    current_time = get_time()
#    frame_time = get_time() - current_time
#    print("Frame_time %f,   %f"%(frame_time,current_time ))
#    return frame_time

def main():

    open_canvas()
    grass = Grass()
    running = True
    team = create_team()

    current_time = get_time()

    while running:

        frame_time = get_time() - current_time
        current_time += frame_time

        print("Frame_time %f,   %f" % (frame_time, current_time))
        handle_events(frame_time)

        for player in team:
            player.update(frame_time)
        clear_canvas()

        grass.draw()

        for player in team:
            player.draw()

        update_canvas()

        #frame_time = get_time() - current_time
        #frame_rate = 1.0 / frame_time
        #print("Frame Rate : %f fps, Frame Time : %f sec, "%(frame_rate, frame_time))

        #current_time += frame_time

        delay(0.07)
    close_canvas()

if __name__== '__main__':
    main()